var rewire = require('rewire');
var Hotwire = rewire('./');

var url = 'http://composite-dq01.cars.com/config-api/1.0/rest/config';

var internals = Hotwire.__get__('internals');
var Promise = Hotwire.__get__('Promise');

describe('Hotwire', function () {
    var hotwire;

    beforeEach(function () {
        hotwire = new Hotwire({ url: url });
    });

    it('should exist', function () {
        expect(Hotwire).toEqual(jasmine.any(Function));
    });

    describe('init', function() {

        it('should resolve with config data', function (done) {
            var mockData = { foo: 'bar' };

            spyOn(internals, '__getData').and.callFake(function () {
                return new Promise(function (resolve, reject) {
                    resolve(mockData);
                });
            });

            hotwire.init().then(function (data) {
                expect(data).toEqual(mockData);
                expect(hotwire.__data__).toEqual(mockData);
                done();
            });


        });
        it('should resolve with config data without url', function (done){ 
            var mockData = { foo: 'bar' };
            hotwire = new Hotwire({
                config : mockData
            });

            hotwire.init().then(function(data) {
                expect(data).toEqual(mockData);
                expect(hotwire.__data__).toEqual(mockData);
                done();
            });
        });

        it('should resolve empty config data with no url or having it passed', function (done){
            hotwire = new Hotwire();
            hotwire.init().then(function (data) {
                expect(data).toEqual({});
                expect(hotwire.__data__).toEqual({});
                done();
            });
        });
    });

    describe('get', function() {
        it('should given a key return a value', function () {
            hotwire.__data__ = { foo : 'bar' };
            expect(hotwire.get('foo')).toEqual('bar');

        });

        it('should given a key not exist return null', function() {
            expect(hotwire.get('foo')).toBeUndefined();
        });

        it('should given a nested key name return the value', function() {
            hotwire.__data__ = { foo : { bar : 'alpha' } };
            expect(hotwire.get('foo.bar')).toEqual('alpha');
        });

        it('should given empty key return all data', function () {
            var mockData = { foo : 'bar' };
            hotwire.__data__ = mockData;
            expect(hotwire.get()).toEqual(mockData);
        });
    });

});
